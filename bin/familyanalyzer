#!/usr/bin/env python

import sys
import familyanalyzer as fa

def main():
    from familyanalyzer.tools import handle_args
    args = handle_args()

    op = fa.OrthoXMLParser(args.orthoxml)
    if args.show_levels:
        print("Species:\n{0}\n\nLevels:\n{1}".format(
              '\n'.join(sorted(list(op.getSpeciesSet()))),
              '\n'.join(sorted(op.getLevels()))))
        sys.exit()
    print("Analyzing {} on taxlevel {}".format(args.orthoxml, args.level))
    print("Species found:")
    print("; ".join(op.getSpeciesSet()))
    print("--> analyzing " + "; ".join(args.species))

    if args.taxonomy == "implicit":
        tax = fa.TaxonomyFactory.newTaxonomy(op)
    else:
        from newick import NewickTaxonomy
        tax = fa.TaxonomyFactory.newTaxonomy(args.taxonomy)
        if isinstance(tax, NewickTaxonomy):
            tax.annotate_from_orthoxml(op)

    if args.show_taxonomy:
        print("Use following taxonomy")
        print(tax)

    # add taxonomy to parser
    op.augmentTaxonomyInfo(tax, args.propagate_top)

    if args.store_augmented_xml is not None:
        op.write(args.store_augmented_xml)

    if args.add_singletons:
        op.augmentSingletons()

    hist = op.getFamHistory()
    hist.analyzeLevel(args.level)
    if args.compare_second_level is None:
        hist.setXRefTag(args.xreftag)
        hist.write(sys.stdout, speciesFilter=args.species)
    else:
        hist2 = op.getFamHistory()
        hist2.analyzeLevel(args.compare_second_level)
        print("Comparing taxlevel {}\n to taxlevel {}".format(
            args.level, args.compare_second_level))
        comp = hist.compare(hist2)
        comp.write(sys.stdout)


if __name__ == "__main__":
    sys.exit(main())
